// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	rabbitmq "github.com/wagslane/go-rabbitmq"
)

// IRabbitMQPublisher is an autogenerated mock type for the IRabbitMQPublisher type
type IRabbitMQPublisher struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *IRabbitMQPublisher) Close() {
	_m.Called()
}

// NotifyPublish provides a mock function with given fields: handler
func (_m *IRabbitMQPublisher) NotifyPublish(handler func(rabbitmq.Confirmation)) {
	_m.Called(handler)
}

// NotifyReturn provides a mock function with given fields: handler
func (_m *IRabbitMQPublisher) NotifyReturn(handler func(rabbitmq.Return)) {
	_m.Called(handler)
}

// Publish provides a mock function with given fields: data, routingKeys, optionFuncs
func (_m *IRabbitMQPublisher) Publish(data []byte, routingKeys []string, optionFuncs ...func(*rabbitmq.PublishOptions)) error {
	_va := make([]interface{}, len(optionFuncs))
	for _i := range optionFuncs {
		_va[_i] = optionFuncs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, data, routingKeys)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []string, ...func(*rabbitmq.PublishOptions)) error); ok {
		r0 = rf(data, routingKeys, optionFuncs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishWithContext provides a mock function with given fields: ctx, data, routingKeys, optionFuncs
func (_m *IRabbitMQPublisher) PublishWithContext(ctx context.Context, data []byte, routingKeys []string, optionFuncs ...func(*rabbitmq.PublishOptions)) error {
	_va := make([]interface{}, len(optionFuncs))
	for _i := range optionFuncs {
		_va[_i] = optionFuncs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data, routingKeys)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []string, ...func(*rabbitmq.PublishOptions)) error); ok {
		r0 = rf(ctx, data, routingKeys, optionFuncs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRabbitMQPublisher creates a new instance of IRabbitMQPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRabbitMQPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRabbitMQPublisher {
	mock := &IRabbitMQPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
