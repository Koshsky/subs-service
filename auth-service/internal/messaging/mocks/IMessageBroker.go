// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/Koshsky/subs-service/auth-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// IMessageBroker is an autogenerated mock type for the IMessageBroker type
type IMessageBroker struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *IMessageBroker) Close() {
	_m.Called()
}

// PublishUserCreated provides a mock function with given fields: user
func (_m *IMessageBroker) PublishUserCreated(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for PublishUserCreated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishUserDeleted provides a mock function with given fields: user
func (_m *IMessageBroker) PublishUserDeleted(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for PublishUserDeleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMessageBroker creates a new instance of IMessageBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMessageBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMessageBroker {
	mock := &IMessageBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
