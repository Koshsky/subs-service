// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	repositories "github.com/Koshsky/subs-service/auth-service/internal/repositories"
	mock "github.com/stretchr/testify/mock"
)

// IDatabase is an autogenerated mock type for the IDatabase type
type IDatabase struct {
	mock.Mock
}

// Count provides a mock function with given fields: value
func (_m *IDatabase) Count(value *int64) repositories.IDatabase {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 repositories.IDatabase
	if rf, ok := ret.Get(0).(func(*int64) repositories.IDatabase); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.IDatabase)
		}
	}

	return r0
}

// Create provides a mock function with given fields: value
func (_m *IDatabase) Create(value interface{}) repositories.IDatabase {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 repositories.IDatabase
	if rf, ok := ret.Get(0).(func(interface{}) repositories.IDatabase); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.IDatabase)
		}
	}

	return r0
}

// First provides a mock function with given fields: dest, conds
func (_m *IDatabase) First(dest interface{}, conds ...interface{}) repositories.IDatabase {
	var _ca []interface{}
	_ca = append(_ca, dest)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 repositories.IDatabase
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) repositories.IDatabase); ok {
		r0 = rf(dest, conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.IDatabase)
		}
	}

	return r0
}

// GetError provides a mock function with no fields
func (_m *IDatabase) GetError() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Model provides a mock function with given fields: value
func (_m *IDatabase) Model(value interface{}) repositories.IDatabase {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Model")
	}

	var r0 repositories.IDatabase
	if rf, ok := ret.Get(0).(func(interface{}) repositories.IDatabase); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.IDatabase)
		}
	}

	return r0
}

// Where provides a mock function with given fields: query, args
func (_m *IDatabase) Where(query interface{}, args ...interface{}) repositories.IDatabase {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Where")
	}

	var r0 repositories.IDatabase
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) repositories.IDatabase); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.IDatabase)
		}
	}

	return r0
}

// NewIDatabase creates a new instance of IDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDatabase {
	mock := &IDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
