// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	authpb "github.com/Koshsky/subs-service/auth-service/internal/authpb"

	mock "github.com/stretchr/testify/mock"
)

// IAuthServer is an autogenerated mock type for the IAuthServer type
type IAuthServer struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, req
func (_m *IAuthServer) Login(ctx context.Context, req *authpb.LoginRequest) (*authpb.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *authpb.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *authpb.LoginRequest) (*authpb.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *authpb.LoginRequest) *authpb.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authpb.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *authpb.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *IAuthServer) Register(ctx context.Context, req *authpb.RegisterRequest) (*authpb.RegisterResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *authpb.RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *authpb.RegisterRequest) (*authpb.RegisterResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *authpb.RegisterRequest) *authpb.RegisterResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authpb.RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *authpb.RegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: ctx, req
func (_m *IAuthServer) ValidateToken(ctx context.Context, req *authpb.TokenRequest) (*authpb.UserResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *authpb.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *authpb.TokenRequest) (*authpb.UserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *authpb.TokenRequest) *authpb.UserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authpb.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *authpb.TokenRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAuthServer creates a new instance of IAuthServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthServer {
	mock := &IAuthServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
